{"version":3,"sources":["components/Navbar.js","components/Textfile.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","Wmode","href","title","type","id","to","aboutText","name","value","onClick","toogleRed","htmlFor","toogleBlue","toogleDefault","checked","toogleState","Textfile","useState","text","setText","heading","style","backgroundColor","color","onChange","event","target","rows","newText","toUpperCase","showAlert","lowText","toLowerCase","copyText","document","getElementById","navigator","clipboard","writeText","replace","length","trim","split","toFixed","Alert","height","role","charAt","substring","msg","defaultProps","App","mode","setmode","alert","setalert","message","setTimeout","pallete","setpallete","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.725ef182.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.Wmode} bg-${props.Wmode}`}>\r\n  <div className=\"container-fluid\">\r\n   <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n         <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n         <a className=\"nav-link\" to=\"/about\">{props.aboutText}</a>\r\n        </li>\r\n      </ul>\r\n\r\n      <div className=\"form-check form-check-inline\">\r\n  <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\" onClick={props.toogleRed}/>\r\n  <label className=\"form-check-label text-warning\" htmlFor=\"inlineRadio1\">Red</label>\r\n      </div>\r\n      <div className=\"form-check form-check-inline\">\r\n  <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\" onClick={props.toogleBlue}/>\r\n  <label className=\"form-check-label text-primary\" htmlFor=\"inlineRadio2\">Blue</label>\r\n      </div>\r\n      <div className=\"form-check form-check-inline\">\r\n  <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio3\" value=\"option3\" onClick={props.toogleDefault} checked/>\r\n  <label className=\"form-check-label text-success\" htmlFor=\"inlineRadio3\">Default</label>\r\n      </div>\r\n\r\n      <form className=\"d-flex\">\r\n      <div className={`form-check form-switch text-${props.Wmode===\"dark\"?\"light\":\"dark\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toogleState}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n// {for default prop types}\r\nNavbar.defaultProps={\r\n    title:\"Set title here\",\r\n    aboutText: \"Here is the text\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function Textfile(props) {\r\n    const handleHIGHbtn = ()=>{\r\n        let newText= text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n    }\r\n    const handleLOWbtn =()=>{\r\n        let lowText = text.toLowerCase();\r\n        setText(lowText);\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n    }\r\n    const handleChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleClear =()=>{\r\n        setText(\"\");\r\n    }\r\n    const handleCopy=()=>{\r\n        let copyText = document.getElementById(\"MyBox\");\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Copied to Clipboard!\",\"success\");\r\n    }\r\n    const handleSpaces=()=>{\r\n        let newText=text.replace(/\\s+/g,\" \");\r\n        setText(newText);\r\n    }\r\n    const [text,setText] = useState(\"Enter the text here.\");\r\n    return (\r\n        <>\r\n        <div className={`mb-4 text-${props.Wmode===\"dark\"?\"light\":\"dark\"}`}>\r\n        <h1>{props.heading}</h1>\r\n            <label htmlFor=\"MyBox\" className=\"form-label\">Text Here</label>\r\n            <textarea className=\"form-control\" value={text} style={{backgroundColor: props.Wmode===\"dark\"?\"#212529\":\"white\", color :props.Wmode===\"dark\"?\"white\":\"black\"}} onChange={handleChange} id=\"MyBox\" rows=\"6\"></textarea>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleHIGHbtn}>Convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLOWbtn}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClear}>Clear</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleSpaces}>Remove unwanted spaces</button>\r\n        </div>\r\n        <div className={`conatiner my-4 text-${props.Wmode===\"dark\"?\"light\":\"dark\"}`}>\r\n        <h2>Your Text Summary.</h2>\r\n        <p>Number of words are: {text.length===0?\"0\":text.trim().split(/\\s+/).length}&nbsp; Number of characters are: {text.length}<br/>\r\n        You can read it in {0.008.toFixed(2)*text.split(\" \").length} minutes on <b>average</b>.\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n        </div>\r\n</>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalize=(text)=>{\r\n        let str = text.charAt(0).toUpperCase();\r\n        return str + text.substring(1);\r\n    }\r\n    return (\r\n        <div style={{height:'60px'}}>\r\n        {props.Alert && <div>\r\n            <div className={`alert alert-${props.Alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{Capitalize(props.Alert.type)}: </strong>{props.Alert.msg}\r\n            </div>\r\n        </div>}\r\n    </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textfile from './components/Textfile';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const showAlert=(message,type)=>{\n    setalert(\n      {msg : message,\n      type: type,}\n    );\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  const [pallete, setpallete] = useState(\"success\");\n  const toogleRed=()=>{\n    if (pallete===\"success\" || pallete===\"primary\") {\n      setpallete('warning');\n      document.body.style.backgroundColor ='red';\n    }\n  }\n  const toogleDefault=()=>\n  {\n    if(pallete==='warning' || pallete==='primary')\n    {\n      setpallete('success');\n      document.body.style.backgroundColor ='white';\n    }\n  }\n  const toogleBlue=()=>{\n    if (pallete==='success' || pallete==='warning') {\n      setpallete('primary');\n      document.body.style.backgroundColor=\"blue\";\n    }\n  }\n  const toogleState=()=>\n  {\n    if (mode==='dark') {\n    setmode(\"light\");\n    document.body.style.backgroundColor = \"white\";     \n    showAlert(\"Dark Mode is Disabled!\",\"success\");\n    \n    }\n    else if (mode==='light'){\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Dark Mode is Enabled!\",\"success\");\n      document.title ='Yogesh_Utils - Dark Mode';\n    }\n  }\n  return (\n    //to return what is to be rendered first and return to index \n    <>\n    {/* <Router> */}\n    <Navbar title=\"Yogesh_Utils\" aboutText=\"About us\" Wmode={mode} toogleState={toogleState} toogleRed={toogleRed} toogleDefault={toogleDefault} toogleBlue={toogleBlue}/>\n    <div className=\"container\">\n    <Alert Alert={alert}/>\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About Wmode={mode}/> */}\n          {/* </Route>\n          <Route exact path=\"/\"> */}\n              <Textfile heading=\"Enter the text:\" Wmode={mode} showAlert={showAlert}/>\n          {/* </Route>\n    </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}